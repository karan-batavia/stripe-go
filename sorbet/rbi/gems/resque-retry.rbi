# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/resque-retry/all/resque-retry.rbi
#
# resque-retry-1.7.6

module Resque
end
module Resque::Plugins
end
module Resque::Plugins::Retry
  def after_perform_retry(*args); end
  def before_perform_retry(*args); end
  def call_symbol_or_block(method, *args); end
  def clean_retry_key(*args); end
  def expire_retry_key_after; end
  def fatal_exceptions; end
  def give_up(exception, *args); end
  def give_up_callback(method = nil, &block); end
  def give_up_callbacks; end
  def ignore_exceptions; end
  def inherited(subclass); end
  def instance_exec(*args, &block); end
  def on_failure_retry(exception, *args); end
  def redis_retry_key(*args); end
  def retry_args(*args); end
  def retry_args_for_exception(exception, *args); end
  def retry_attempt; end
  def retry_criteria_check(method = nil, &block); end
  def retry_criteria_checks; end
  def retry_criteria_checks_pass?(exception, *args); end
  def retry_criteria_valid?(exception, *args); end
  def retry_delay(exception_class = nil); end
  def retry_exception?(exception); end
  def retry_exceptions; end
  def retry_identifier(*args); end
  def retry_job_delegate; end
  def retry_limit; end
  def retry_limit_reached?; end
  def retry_queue(exception, *args); end
  def run_give_up_callbacks(exception, *args); end
  def run_try_again_callbacks(exception, *args); end
  def self.extended(receiver); end
  def sleep_after_requeue; end
  def try_again(exception, *args); end
  def try_again_callback(method = nil, &block); end
  def try_again_callbacks; end
  include Resque::Plugins::Retry::Logging
end
module Resque::Plugins::Retry::Logging
  def log_message(message, args = nil, exception = nil); end
end
class Resque::Plugins::Retry::AmbiguousRetryStrategyException < StandardError
end
class Resque::Plugins::Retry::RetryConfigurationException < StandardError
end
module Resque::Plugins::ExponentialBackoff
  def backoff_strategy; end
  def retry_delay(_ = nil); end
  def retry_delay_multiplicand_max; end
  def retry_delay_multiplicand_min; end
  def retry_limit; end
  def self.extended(receiver); end
  include Resque::Plugins::Retry
end
class Resque::Plugins::ExponentialBackoff::InvalidRetryDelayMultiplicandConfigurationException < StandardError
end
module Resque::Failure
end
class Resque::Failure::MultipleWithRetrySuppression < Resque::Failure::Multiple
  def args_from(payload); end
  def cleanup_retry_failure_log!; end
  def failure_key; end
  def klass; end
  def redis_key_exists?(key); end
  def retry_key; end
  def retryable?; end
  def retrying?; end
  def save; end
  def self.failure_key(retry_key); end
  include Resque::Plugins::Retry::Logging
end
module ResqueRetry
end
