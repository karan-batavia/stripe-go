# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/minitest-rails/all/minitest-rails.rbi
#
# minitest-rails-6.1.0

module Minitest
end
module Minitest::Rails
end
class Minitest::Rails::Railtie < Rails::Railtie
end
class ActiveSupport::TestCase < Minitest::Test
  def refute_changes(expression, message = nil, &block); end
  def refute_difference(expression, message = nil, &block); end
  extend ActiveSupport::Testing::ConstantLookup::ClassMethods
  extend Minitest::Spec::DSL
  include ActiveSupport::Testing::ConstantLookup
  include Minitest::Spec::DSL::InstanceMethods
end
class ActionView::TestCase < ActiveSupport::TestCase
  def refute_difference(expression, message = nil, &block); end
  def refute_dom_equal(expected, actual, message = nil); end
end
class ActionDispatch::IntegrationTest < ActiveSupport::TestCase
  def must_redirect_to(options = nil, message = nil); end
  def must_respond_with(type, message = nil); end
  def must_select(*args, &block); end
  def must_select_email(&block); end
  def must_select_encoded(element = nil, &block); end
  def refute_difference(expression, message = nil, &block); end
  def refute_dom_equal(expected, actual, message = nil); end
  include Minitest::Rails::Expectations::ActionDispatch
end
class ActiveJob::TestCase < ActiveSupport::TestCase
  def must_enqueue_jobs(number, only: nil, except: nil, queue: nil, &block); end
  def must_enqueue_with(job: nil, args: nil, at: nil, queue: nil, &block); end
  def must_perform_jobs(number, only: nil, except: nil, queue: nil, &block); end
  def must_perform_with(job: nil, args: nil, at: nil, queue: nil, &block); end
  def refute_enqueued_jobs(only: nil, except: nil, queue: nil, &block); end
  def refute_performed_jobs(only: nil, except: nil, queue: nil, &block); end
  def wont_enqueue_jobs(only: nil, except: nil, queue: nil, &block); end
  def wont_perform_jobs(only: nil, except: nil, queue: nil, &block); end
  include Minitest::Rails::Expectations::ActiveJob
end
class ActionCable::TestCase < ActiveSupport::TestCase
  def must_broadcast_on(stream, data, &block); end
  def must_have_broadcasts(stream, number, &block); end
  def refute_broadcasts(stream, &block); end
  def wont_have_broadcasts(stream, &block); end
  include Minitest::Rails::Expectations::ActionCable::TestHelper
end
class ActionCable::Channel::TestCase < ActiveSupport::TestCase
  def must_broadcast_on(stream_or_object, *args); end
  def must_have_broadcasts(stream_or_object, *args); end
  def must_have_stream_for(object); end
  def must_have_streams(stream); end
  def refute_broadcasts(stream, &block); end
  def refute_streams; end
  def wont_have_broadcasts(stream, &block); end
  def wont_have_streams; end
  include Minitest::Rails::Expectations::ActionCable::Channel
  include Minitest::Rails::Expectations::ActionCable::TestHelper
end
class ActionCable::Connection::TestCase < ActiveSupport::TestCase
  def must_reject_connection(&block); end
  include Minitest::Rails::Expectations::ActionCable::Connection
end
class ActionMailer::TestCase < ActiveSupport::TestCase
  def must_enqueue_email_with(mailer, method, args: nil, queue: nil, &block); end
  def must_have_emails(number, &block); end
  def must_have_enqueued_emails(number, &block); end
  def refute_emails(&block); end
  def refute_enqueued_emails(&block); end
  def wont_have_emails(&block); end
  def wont_have_enqueued_emails(&block); end
  include Minitest::Rails::Expectations::ActionMailer
end
module Minitest::Rails::Expectations
end
module Minitest::Rails::Expectations::ActiveSupport
  def must_change(*args); end
  def must_differ(*args); end
  def wont_change(*args); end
  def wont_differ(*args); end
end
class Minitest::Expectation < Struct
  def must_change(*args); end
  def must_differ(*args); end
  def must_dom_equal(*args); end
  def must_route_for(*args); end
  def must_route_from(*args); end
  def must_route_to(*args); end
  def wont_change(*args); end
  def wont_differ(*args); end
  def wont_dom_equal(*args); end
end
class Object < BasicObject
  include Minitest::Rails::Expectations::ActiveSupport
end
module Minitest::Rails::Expectations::ActionDispatch
  def must_dom_equal(*args); end
  def must_route_for(*args); end
  def must_route_from(*args); end
  def must_route_to(*args); end
  def wont_dom_equal(*args); end
  extend ActiveSupport::Concern
end
module Minitest::Rails::Expectations::ActiveJob
  extend ActiveSupport::Concern
  include ActiveJob::TestHelper
end
module Minitest::Rails::Expectations::ActionCable
end
module Minitest::Rails::Expectations::ActionCable::TestHelper
  extend ActiveSupport::Concern
end
module Minitest::Rails::Expectations::ActionCable::Channel
  extend ActiveSupport::Concern
end
module Minitest::Rails::Expectations::ActionCable::Connection
  extend ActiveSupport::Concern
end
module Minitest::Rails::Expectations::ActionMailer
  extend ActiveSupport::Concern
end
module Minitest::Rails::SpecTests
end
module Kernel
  def describe_before_minitest_spec_constant_fix(desc, *additional_desc, &block); end
end
class Rails::Generators::TestCase < ActiveSupport::TestCase
end
