# frozen_string_literal: true
# typed: true

require_relative './_lib'

class Critic::OrderAmendmentTermination < Critic::OrderAmendmentFunctionalTest
  before do
    @user = make_user(save: true)
  end

  it 'cancels a subscription in the future' do
    sf_order = create_subscription_order

    StripeForce::Translate.perform_inline(@user, sf_order.Id)

    sf_order.refresh
    stripe_id = sf_order[prefixed_stripe_field(GENERIC_STRIPE_ID)]

    original_subscription_schedule = Stripe::SubscriptionSchedule.retrieve(stripe_id, @user.stripe_credentials)

    sf_contract = create_contract_from_order(sf_order)

    # api precondition: initial orders have a nil contract ID
    sf_order.refresh
    assert_nil(sf_order.ContractId)

    # the contract should reference the initial order that was created
    assert_equal(sf_order[SF_ID], sf_contract[SF_CONTRACT_ORDER_ID])

    amendment_data = create_quote_data_from_contract_amendment(sf_contract)

    # wipe out the product
    amendment_data["lineItems"].first["record"]["SBQQ__Quantity__c"] = 0

    # the quote is generated by the contract CPQ API, so we need to set these fields manually
    # let's have the second phase start in 9mo
    end_date = (now_time + 9.months)
    amendment_data["record"][CPQ_QUOTE_SUBSCRIPTION_START_DATE] = format_date_for_salesforce(end_date)
    amendment_data["record"][CPQ_QUOTE_SUBSCRIPTION_TERM] = 3

    sf_order_amendment = create_order_from_quote_data(amendment_data)
    assert_equal(sf_order_amendment.Type, OrderTypeOptions::AMENDMENT.serialize)

    StripeForce::Translate.perform_inline(@user, sf_order_amendment.Id)

    sf_order.refresh
    stripe_id = sf_order[prefixed_stripe_field(GENERIC_STRIPE_ID)]

    subscription_schedule = Stripe::SubscriptionSchedule.retrieve(stripe_id, @user.stripe_credentials)

    assert_equal(1, subscription_schedule.phases.count)

    # make sure the end date is modified to match the end date of the amendment
    phase = T.must(subscription_schedule.phases.first)
    assert_equal(0, end_date.to_i - phase.end_date)
    assert_equal(0, phase.start_date - now_time.to_i)

    assert_equal(1, phase.items.count)
    assert_equal(0, phase.add_invoice_items.count)
    phase_item = T.must(phase.items.first)
    assert_equal(1, phase_item.quantity)

    original_subscription_phase = T.must(original_subscription_schedule.phases.first)
    excluded_comparison_fields = %i{metadata end_date}
    assert_equal(
      original_subscription_phase.to_hash.reject {|k, _v| excluded_comparison_fields.include?(k) },
      phase.to_hash.reject {|k, _v| excluded_comparison_fields.include?(k) },
      "outside of metadata and end_date the original subscription and terminated subscription should be equal"
    )
  end

  # stripe allows for zero-quantity line items, we need to make sure they are removed
  it 'removes a line item that is partially terminated' do
    # initial order: two lines
    # order amendment, remove both of the lines
    # resulting last phase: should have a single item

    initial_start_date = now_time
    standard_term = 12
    amendment_term = 6
    amendment_start_date = initial_start_date + 6.months
    amendment_end_date = amendment_start_date + amendment_term.months

    sf_product_id_1, sf_pricebook_id_1 = salesforce_recurring_product_with_price
    sf_product_id_2, sf_pricebook_id_2 = salesforce_recurring_product_with_price

    sf_account_id = create_salesforce_account

    quote_id = create_salesforce_quote(
      sf_account_id: sf_account_id,
      additional_quote_fields: {
        CPQ_QUOTE_SUBSCRIPTION_START_DATE => now_time_formatted_for_salesforce,
        CPQ_QUOTE_SUBSCRIPTION_TERM => 12.0,
      }
    )

    quote_with_product = add_product_to_cpq_quote(quote_id, sf_product_id: sf_product_id_1)
    calculate_and_save_cpq_quote(quote_with_product)

    quote_with_product = add_product_to_cpq_quote(quote_id, sf_product_id: sf_product_id_2)
    calculate_and_save_cpq_quote(quote_with_product)

    sf_order = create_order_from_cpq_quote(quote_id)

    sf_contract = create_contract_from_order(sf_order)

    amendment_data = create_quote_data_from_contract_amendment(sf_contract)

    # remove the second product
    amendment_data["lineItems"].detect {|i| i["record"]["SBQQ__Product__c"] == sf_product_id_2 }["record"]["SBQQ__Quantity__c"] = 0

    amendment_data["record"][CPQ_QUOTE_SUBSCRIPTION_START_DATE] = (initial_start_date + 1.month).strftime("%Y-%m-%d")
    amendment_data["record"][CPQ_QUOTE_SUBSCRIPTION_TERM] = standard_term - 1

    sf_order_partial_termination = create_order_from_quote_data(amendment_data)

    StripeForce::Translate.perform_inline(@user, sf_order_partial_termination.Id)

    sf_order.refresh
    stripe_id = sf_order[prefixed_stripe_field(GENERIC_STRIPE_ID)]

    subscription_schedule = Stripe::SubscriptionSchedule.retrieve(stripe_id, @user.stripe_credentials)

    assert_equal(2, subscription_schedule.phases.count)

    first_phase = T.must(subscription_schedule.phases.first)
    second_phase = T.must(subscription_schedule.phases[1])

    assert_equal(2, first_phase.items.count)
    assert_equal(1, second_phase.items.count)

    # only one item since the other was terminated
    second_phase_item = T.must(second_phase.items.first)
    assert_equal(1, second_phase_item.quantity)

    price = Stripe::Price.retrieve(second_phase_item.price, @user.stripe_credentials)
    assert_equal(sf_pricebook_id_1, price.metadata['salesforce_pricebook_entry_id'])
  end

  # use case: user decides *right* after signing the contract they want to change their order competely
  it 'cancels a subscription on the same day' do
    sf_order = create_subscription_order

    StripeForce::Translate.perform_inline(@user, sf_order.Id)

    sf_contract = create_contract_from_order(sf_order)

    # the contract should reference the initial order that was created
    assert_equal(sf_order[SF_ID], sf_contract[SF_CONTRACT_ORDER_ID])

    amendment_data = create_quote_data_from_contract_amendment(sf_contract)

    # wipe out the product
    amendment_data["lineItems"].first["record"]["SBQQ__Quantity__c"] = 0

    # the quote is generated by the contract CPQ API, so we need to set these fields manually
    # let's have the second phase start in 9mo
    # end_date = (DateTime.now.utc.beginning_of_day + 9.months)
    amendment_data["record"][CPQ_QUOTE_SUBSCRIPTION_START_DATE] = now_time_formatted_for_salesforce
    amendment_data["record"][CPQ_QUOTE_SUBSCRIPTION_TERM] = 12

    sf_order_amendment = create_order_from_quote_data(amendment_data)
    assert_equal(sf_order_amendment.Type, OrderTypeOptions::AMENDMENT.serialize)

    StripeForce::Translate.perform_inline(@user, sf_order_amendment.Id)

    sf_order.refresh
    stripe_id = sf_order[prefixed_stripe_field(GENERIC_STRIPE_ID)]
    subscription_schedule = Stripe::SubscriptionSchedule.retrieve(stripe_id, @user.stripe_credentials)

    # TODO is there anything else we need to do when we cancel a subscription schedule? Something with the invoices or subscription?
    assert_equal('canceled', subscription_schedule.status)
  end
end
